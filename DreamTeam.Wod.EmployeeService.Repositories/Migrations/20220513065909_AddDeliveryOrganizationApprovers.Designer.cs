// <auto-generated />
using System;
using DreamTeam.Wod.EmployeeService.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DreamTeam.Wod.EmployeeService.Repositories.Migrations
{
    [DbContext(typeof(EmployeeServiceDbContext))]
    [Migration("20220513065909_AddDeliveryOrganizationApprovers")]
    partial class AddDeliveryOrganizationApprovers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CurrentCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("SupportsRelocation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CurrentCountry");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryId")
                        .HasMaxLength(64);

                    b.Property<int?>("CountryIdObsolete");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<bool>("IsCustom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("IsCustom");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CurrentLocation");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.DeliveryOrganizationApprover", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<string>("CountryId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsPrimary");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.HasKey("EmployeeId", "CountryId");

                    b.HasIndex("CountryId")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("DeliveryOrganizationApprover");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryId")
                        .HasMaxLength(64);

                    b.Property<int?>("CurrentLocationId");

                    b.Property<DateTime?>("DismissalDate");

                    b.Property<string>("DismissalReason");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EmploymentDate");

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsContractor");

                    b.Property<string>("Location");

                    b.Property<DateTime?>("NextPrDate");

                    b.Property<string>("OrganizationId")
                        .IsConcurrencyToken()
                        .HasMaxLength(64);

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("ResponsibleHrManagerId");

                    b.Property<int?>("SeniorityId");

                    b.Property<int?>("TitleRoleId");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("DismissalReason");

                    b.HasIndex("DomainName")
                        .IsUnique();

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ResponsibleHrManagerId");

                    b.HasIndex("SeniorityId");

                    b.HasIndex("TitleRoleId");

                    b.HasIndex("IsActive", "UnitId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeDate");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<int>("LocationId");

                    b.Property<DateTime>("SinceDate");

                    b.Property<DateTime?>("UntilDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("EmployeeCurrentLocation");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocationChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("NewLocationId");

                    b.Property<int?>("PreviousLocationId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NewLocationId");

                    b.HasIndex("PreviousLocationId");

                    b.ToTable("EmployeeCurrentLocationChange");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeOrganizationChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<string>("NewOrganizationId")
                        .HasMaxLength(64);

                    b.Property<string>("PreviousOrganizationId")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeOrganizationChange");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeePreferredDeliveryCenter", b =>
                {
                    b.Property<int>("PreferredDeliveryCenterId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("PreferredDeliveryCenterId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePreferredDeliveryCenter");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeePreferredDeliveryCenters", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy")
                        .HasMaxLength(64);

                    b.Property<string>("Comment")
                        .HasMaxLength(5000);

                    b.HasKey("EmployeeId");

                    b.ToTable("EmployeePreferredDeliveryCenters");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<int>("RoleId");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CloseReason");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(254);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstNameLocal")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDomainNameVerified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastNameLocal")
                        .HasMaxLength(200);

                    b.Property<string>("Location")
                        .HasMaxLength(100);

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .HasMaxLength(64);

                    b.Property<string>("PhotoId")
                        .HasMaxLength(64);

                    b.Property<string>("Skype")
                        .HasMaxLength(256);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StudentLabId")
                        .HasMaxLength(64);

                    b.Property<string>("StudentLabProfileUrl");

                    b.Property<string>("Telegram")
                        .HasMaxLength(32);

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CloseReason");

                    b.HasIndex("DomainName");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Internship");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.PreferredDeliveryCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PreferredDeliveryCenter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "central_asia_kazakhstan_uzbekistan_kyrgyzstan",
                            IsActive = true,
                            Name = "Central Asia (Kazakhstan, Uzbekistan, Kyrgyzstan)"
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "georgia",
                            IsActive = true,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 3,
                            ExternalId = "poland",
                            IsActive = true,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 4,
                            ExternalId = "lithuania",
                            IsActive = true,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 5,
                            ExternalId = "czech_republic_slovakia_hungary",
                            IsActive = true,
                            Name = "Czech Republic, Slovakia, Hungary"
                        },
                        new
                        {
                            Id = 6,
                            ExternalId = "bulgaria_serbia",
                            IsActive = true,
                            Name = "Bulgaria, Serbia"
                        },
                        new
                        {
                            Id = 7,
                            ExternalId = "latam",
                            IsActive = true,
                            Name = "LATAM"
                        },
                        new
                        {
                            Id = 8,
                            ExternalId = "belarus",
                            IsActive = false,
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 9,
                            ExternalId = "ukraine",
                            IsActive = false,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 10,
                            ExternalId = "uk",
                            IsActive = false,
                            Name = "UK"
                        },
                        new
                        {
                            Id = 11,
                            ExternalId = "us",
                            IsActive = false,
                            Name = "US"
                        },
                        new
                        {
                            Id = 12,
                            ExternalId = "austria",
                            IsActive = false,
                            Name = "Austria"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CloseDate");

                    b.Property<string>("Comment")
                        .HasMaxLength(5000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("GmVisaState");

                    b.Property<DateTime?>("GmVisaStateChangeDate");

                    b.Property<string>("GmVisaStateChangedBy")
                        .HasMaxLength(64);

                    b.Property<bool>("IsInductionPassed");

                    b.Property<int>("LocationId");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Active");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.Property<string>("VisaState")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GmVisaState");

                    b.HasIndex("LocationId");

                    b.HasIndex("State");

                    b.HasIndex("VisaState");

                    b.ToTable("RelocationPlan");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("NewDestinationId");

                    b.Property<string>("NewGmVisaState");

                    b.Property<bool?>("NewIsInductionPassed");

                    b.Property<string>("NewVisaState");

                    b.Property<int?>("PreviousDestinationId");

                    b.Property<string>("PreviousGmVisaState");

                    b.Property<bool?>("PreviousIsInductionPassed");

                    b.Property<string>("PreviousVisaState");

                    b.Property<int>("RelocationPlanId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NewDestinationId");

                    b.HasIndex("NewGmVisaState");

                    b.HasIndex("NewVisaState");

                    b.HasIndex("PreviousDestinationId");

                    b.HasIndex("PreviousGmVisaState");

                    b.HasIndex("PreviousVisaState");

                    b.HasIndex("RelocationPlanId");

                    b.HasIndex("Type");

                    b.ToTable("RelocationPlanChange");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("RoleConfiguration");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationEmployee", b =>
                {
                    b.Property<int>("RoleConfigurationId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("RoleConfigurationId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RoleConfigurationEmployee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationTitleRole", b =>
                {
                    b.Property<int>("RoleConfigurationId");

                    b.Property<int>("TitleRoleId");

                    b.HasKey("RoleConfigurationId", "TitleRoleId");

                    b.HasIndex("TitleRoleId");

                    b.ToTable("RoleConfigurationTitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationUnit", b =>
                {
                    b.Property<int>("RoleConfigurationId");

                    b.Property<string>("UnitId")
                        .HasMaxLength(64);

                    b.HasKey("RoleConfigurationId", "UnitId");

                    b.ToTable("RoleConfigurationUnit");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<bool>("IsHidden");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Seniority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "junior",
                            IsHidden = false,
                            Name = "Junior",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "middle",
                            IsHidden = true,
                            Name = "Middle",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            ExternalId = "senior",
                            IsHidden = false,
                            Name = "Senior",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            ExternalId = "lead",
                            IsHidden = false,
                            Name = "Lead",
                            Order = 4
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.SyncLog", b =>
                {
                    b.Property<int>("SyncLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffectedInternshipsCount");

                    b.Property<bool>("IsOutdated");

                    b.Property<bool>("IsSuccessful");

                    b.Property<DateTime>("SyncCompletedDate");

                    b.Property<DateTime>("SyncStartDate");

                    b.HasKey("SyncLogId");

                    b.ToTable("SyncLog");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired();

                    b.Property<bool>("HasSeniority");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+DismissalReasons", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("DismissalReason");

                    b.HasData(
                        new
                        {
                            Id = "Dismissed"
                        },
                        new
                        {
                            Id = "MaternityLeave"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+GmVisaStates", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("GmVisaState");

                    b.HasData(
                        new
                        {
                            Id = "RequireVerification"
                        },
                        new
                        {
                            Id = "Pending"
                        },
                        new
                        {
                            Id = "Agency"
                        },
                        new
                        {
                            Id = "EmbassyAppointment"
                        },
                        new
                        {
                            Id = "VisaInProgress"
                        },
                        new
                        {
                            Id = "VisaDone"
                        },
                        new
                        {
                            Id = "VisaNotValid"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+InternshipCloseReasons", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("InternshipCloseReason");

                    b.HasData(
                        new
                        {
                            Id = "Manually"
                        },
                        new
                        {
                            Id = "AutomaticallyDueInactivity"
                        },
                        new
                        {
                            Id = "AutomaticallyDueEmployment"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanChangeTypes", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("RelocationPlanChangeType");

                    b.HasData(
                        new
                        {
                            Id = "InductionPassed"
                        },
                        new
                        {
                            Id = "Destination"
                        },
                        new
                        {
                            Id = "VisaState"
                        },
                        new
                        {
                            Id = "GmVisaState"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanStates", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("RelocationPlanState");

                    b.HasData(
                        new
                        {
                            Id = "Active"
                        },
                        new
                        {
                            Id = "Completed"
                        },
                        new
                        {
                            Id = "Cancelled"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+VisaStates", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("VisaState");

                    b.HasData(
                        new
                        {
                            Id = "Acquired"
                        },
                        new
                        {
                            Id = "InProgress"
                        },
                        new
                        {
                            Id = "NotRequired"
                        },
                        new
                        {
                            Id = "RequireAssistance"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.DeliveryOrganizationApprover", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Employee", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+DismissalReasons")
                        .WithMany()
                        .HasForeignKey("DismissalReason")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "ResponsibleHrManager")
                        .WithMany()
                        .HasForeignKey("ResponsibleHrManagerId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Seniority", "Seniority")
                        .WithMany()
                        .HasForeignKey("SeniorityId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", "TitleRole")
                        .WithMany()
                        .HasForeignKey("TitleRoleId");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocationChange", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "NewLocation")
                        .WithMany()
                        .HasForeignKey("NewLocationId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "PreviousLocation")
                        .WithMany()
                        .HasForeignKey("PreviousLocationId");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeOrganizationChange", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeePreferredDeliveryCenter", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.EmployeePreferredDeliveryCenters", "EmployeePreferredDeliveryCenters")
                        .WithMany("PreferredDeliveryCenters")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.PreferredDeliveryCenter", "PreferredDeliveryCenter")
                        .WithMany()
                        .HasForeignKey("PreferredDeliveryCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeePreferredDeliveryCenters", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.EmployeePreferredDeliveryCenters", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeRole", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Internship", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+InternshipCloseReasons")
                        .WithMany()
                        .HasForeignKey("CloseReason")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+GmVisaStates")
                        .WithMany()
                        .HasForeignKey("GmVisaState")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanStates")
                        .WithMany()
                        .HasForeignKey("State")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+VisaStates")
                        .WithMany()
                        .HasForeignKey("VisaState")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanChange", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "NewDestination")
                        .WithMany()
                        .HasForeignKey("NewDestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+GmVisaStates")
                        .WithMany()
                        .HasForeignKey("NewGmVisaState")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+VisaStates")
                        .WithMany()
                        .HasForeignKey("NewVisaState")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "PreviousDestination")
                        .WithMany()
                        .HasForeignKey("PreviousDestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+GmVisaStates")
                        .WithMany()
                        .HasForeignKey("PreviousGmVisaState")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+VisaStates")
                        .WithMany()
                        .HasForeignKey("PreviousVisaState")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", "RelocationPlan")
                        .WithMany()
                        .HasForeignKey("RelocationPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanChangeTypes")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Role", "Role")
                        .WithOne()
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationEmployee", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "RoleConfiguration")
                        .WithMany("Employees")
                        .HasForeignKey("RoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationTitleRole", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "RoleConfiguration")
                        .WithMany("TitleRoles")
                        .HasForeignKey("RoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", "TitleRole")
                        .WithMany()
                        .HasForeignKey("TitleRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationUnit", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "RoleConfiguration")
                        .WithMany("Units")
                        .HasForeignKey("RoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
