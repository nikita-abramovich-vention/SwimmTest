// <auto-generated />
using System;
using DreamTeam.Wod.EmployeeService.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DreamTeam.Wod.EmployeeService.Repositories.Migrations
{
    [DbContext(typeof(EmployeeServiceDbContext))]
    [Migration("20231204083313_AddExternalIdToEmployeeUnitHistory")]
    partial class AddExternalIdToEmployeeUnitHistory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DreamTeam.Repositories.EntityFramework.ModelBuilderExtensions+EnumValue<DreamTeam.Wod.EmployeeService.DomainModel.DismissalRequestType>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("DismissalRequestType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Ordinary"
                        },
                        new
                        {
                            Id = "Relocation"
                        },
                        new
                        {
                            Id = "ContractChange"
                        },
                        new
                        {
                            Id = "MaternityLeave"
                        });
                });

            modelBuilder.Entity("DreamTeam.Repositories.EntityFramework.ModelBuilderExtensions+EnumValue<DreamTeam.Wod.EmployeeService.DomainModel.EmploymentType>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Contractor"
                        },
                        new
                        {
                            Id = "Office"
                        },
                        new
                        {
                            Id = "Remote"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaidInAdvance")
                        .HasColumnType("bit");

                    b.Property<int>("RelocationPlanId")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("RelocationPlanId")
                        .IsUnique();

                    b.ToTable("CompensationInfo");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CountryRelocationStep", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "StepId");

                    b.HasIndex("StepId");

                    b.ToTable("CountryRelocationStep");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasCompanyOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRelocationDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("IsCustom");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CurrentLocation");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.DismissalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DismissalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("SourceDismissalRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("SourceDismissalRequestId")
                        .IsUnique()
                        .HasFilter("[SourceDismissalRequestId] IS NOT NULL");

                    b.HasIndex("Type");

                    b.ToTable("DismissalRequest");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DismissalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmploymentOfficeId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationId")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ResponsibleHrManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("SeniorityId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleRoleId")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("DeactivationReason");

                    b.HasIndex("DomainName")
                        .IsUnique();

                    b.HasIndex("EmploymentType");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ResponsibleHrManagerId");

                    b.HasIndex("SeniorityId");

                    b.HasIndex("TitleRoleId");

                    b.HasIndex("IsActive", "UnitId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SinceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UntilDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("EmployeeCurrentLocation");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocationChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("NewLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NewLocationId");

                    b.HasIndex("PreviousLocationId");

                    b.ToTable("EmployeeCurrentLocationChange");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeOrganizationChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("NewOrganizationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PreviousOrganizationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeOrganizationChange");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("SeniorityId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("SeniorityId");

                    b.HasIndex("TitleRoleId");

                    b.HasIndex("UnitId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("UnitId"), new[] { "FromDate", "ToDate", "IsActive" });

                    b.HasIndex("EmployeeId", "FromDate")
                        .IsUnique();

                    b.HasIndex("FromDate", "ToDate");

                    b.ToTable("EmployeeSnapshot");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeSnapshotLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.ToTable("EmployeeSnapshotLog");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeUnitHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("EmployeeId", "UnitId", "EndDate");

                    b.HasIndex("EmployeeId", "UnitId", "StartDate");

                    b.ToTable("EmployeeUnitHistory");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeWorkplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkplaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkplaceId");

                    b.HasIndex("EmployeeId", "WorkplaceId")
                        .IsUnique();

                    b.ToTable("EmployeeWorkplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmploymentPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmploymentPeriod");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmploymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("SourceId");

                    b.ToTable("EmploymentRequest");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalDismissalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DismissalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DismissalSpecificId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SourceCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.ToTable("ExternalDismissalRequest");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmployeeUnitHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeUnitHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceEmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SourceUnitId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeUnitHistoryId")
                        .IsUnique()
                        .HasFilter("[EmployeeUnitHistoryId] IS NOT NULL");

                    b.HasIndex("SourceEmployeeId", "SourceUnitId", "EndDate");

                    b.HasIndex("SourceEmployeeId", "SourceUnitId", "StartDate");

                    b.ToTable("ExternalEmployeeUnitHistory");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmployeeWorkplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeWorkplaceId")
                        .HasColumnType("int");

                    b.Property<string>("SourceEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceWorkplaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeWorkplaceId")
                        .IsUnique()
                        .HasFilter("[EmployeeWorkplaceId] IS NOT NULL");

                    b.HasIndex("SourceEmployeeId", "SourceWorkplaceId")
                        .IsUnique();

                    b.ToTable("ExternalEmployeeWorkplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmploymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExternalEmploymentRequest");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalWorkplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OfficeSourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExternalWorkplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CloseReason")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstNameLocal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDomainNameVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastNameLocal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Phone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhotoId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Skype")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentLabId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("StudentLabProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telegram")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CloseReason");

                    b.HasIndex("DomainName")
                        .IsUnique()
                        .HasFilter("IsActive = 1");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Internship");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApproverOrderId")
                        .HasColumnType("int");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverOrderId")
                        .IsUnique()
                        .HasFilter("[ApproverOrderId] IS NOT NULL");

                    b.HasIndex("CountryId")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1");

                    b.HasIndex("EmployeeId", "CountryId")
                        .IsUnique();

                    b.ToTable("RelocationApprover");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApproverAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApproverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("RelocationPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("RelocationPlanId");

                    b.ToTable("RelocationApproverAssignment");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApproverOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsNext")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RelocationApproverOrder");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationCaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.ToTable("RelocationCaseStatus");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ApproverComment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApproverCommentChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApproverDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<string>("CloseComment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentStepId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Induction");

                    b.Property<string>("EmployeeComment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmployeeCommentChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmployeeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GmComment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GmCommentChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GmManagerId")
                        .HasColumnType("int");

                    b.Property<string>("HrManagerComment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HrManagerCommentChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HrManagerDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HrManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InductionStatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InductionStatusChangedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmploymentConfirmedByEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInductionPassed")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("RelocationUnitId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Salary")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StatusDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("GmManagerId");

                    b.HasIndex("HrManagerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("State");

                    b.HasIndex("StatusId");

                    b.HasIndex("EmployeeId", "State")
                        .IsUnique()
                        .HasFilter("[State] = 'Active'");

                    b.ToTable("RelocationPlan");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("NewDestinationId")
                        .HasColumnType("int");

                    b.Property<bool?>("NewIsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewIsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewIsEmploymentConfirmedByEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewIsInductionPassed")
                        .HasColumnType("bit");

                    b.Property<int?>("NewStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousDestinationId")
                        .HasColumnType("int");

                    b.Property<bool?>("PreviousIsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreviousIsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreviousIsEmploymentConfirmedByEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreviousIsInductionPassed")
                        .HasColumnType("bit");

                    b.Property<int?>("PreviousStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RelocationPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NewDestinationId");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("PreviousDestinationId");

                    b.HasIndex("PreviousStatusId");

                    b.HasIndex("RelocationPlanId");

                    b.HasIndex("Type");

                    b.ToTable("RelocationPlanChange");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CaseStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CaseStatusId")
                        .IsUnique()
                        .HasFilter("[CaseStatusId] IS NOT NULL");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("RelocationPlanStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "induction",
                            Name = "Induction"
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "employee_confirmation",
                            Name = "Employee confirmation"
                        },
                        new
                        {
                            Id = 3,
                            ExternalId = "pending_approval",
                            Name = "Pending approval"
                        },
                        new
                        {
                            Id = 4,
                            ExternalId = "relocation_approved",
                            Name = "Relocation approved"
                        },
                        new
                        {
                            Id = 5,
                            ExternalId = "in_progress",
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 6,
                            ExternalId = "visa_docs_preparation",
                            Name = "Visa docs preparation"
                        },
                        new
                        {
                            Id = 7,
                            ExternalId = "waiting_for_embassy_appointment",
                            Name = "Waiting for embassy appointment"
                        },
                        new
                        {
                            Id = 8,
                            ExternalId = "embassy_appointment",
                            Name = "Embassy appointment"
                        },
                        new
                        {
                            Id = 9,
                            ExternalId = "visa_in_progress",
                            Name = "Visa in progress"
                        },
                        new
                        {
                            Id = 10,
                            ExternalId = "visa_done",
                            Name = "Visa done"
                        },
                        new
                        {
                            Id = 30,
                            ExternalId = "trp_docs_preparation",
                            Name = "TRP docs preparation"
                        },
                        new
                        {
                            Id = 31,
                            ExternalId = "trp_application_submission",
                            Name = "TRP application submission"
                        },
                        new
                        {
                            Id = 32,
                            ExternalId = "trp_in_progress",
                            Name = "TRP in progress"
                        },
                        new
                        {
                            Id = 40,
                            ExternalId = "trp_docs_translation_and_legalization",
                            Name = "TRP docs translation and legalization"
                        },
                        new
                        {
                            Id = 41,
                            ExternalId = "trp_docs_submission_to_migration_directorate",
                            Name = "TRP docs submission to the migration directorate"
                        },
                        new
                        {
                            Id = 42,
                            ExternalId = "trp_id_card_docs_in_progress",
                            Name = "ID card docs in progress"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStep", b =>
                {
                    b.Property<int>("RelocationPlanId")
                        .HasColumnType("int");

                    b.Property<string>("StepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpectedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompletionDateHidden")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("RelocationPlanId", "StepId");

                    b.HasIndex("StepId");

                    b.ToTable("RelocationPlanStep");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleManagerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("RoleConfiguration");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationEmployee", b =>
                {
                    b.Property<int>("RoleConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigurationId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RoleConfigurationEmployee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationTitleRole", b =>
                {
                    b.Property<int>("RoleConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("TitleRoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigurationId", "TitleRoleId");

                    b.HasIndex("TitleRoleId");

                    b.ToTable("RoleConfigurationTitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationUnit", b =>
                {
                    b.Property<int>("RoleConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("RoleConfigurationId", "UnitId");

                    b.ToTable("RoleConfigurationUnit");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Seniority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "junior",
                            IsHidden = false,
                            Name = "Junior",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "middle",
                            IsHidden = true,
                            Name = "Middle",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            ExternalId = "senior",
                            IsHidden = false,
                            Name = "Senior",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            ExternalId = "lead",
                            IsHidden = false,
                            Name = "Lead",
                            Order = 4
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.StudentLabSyncLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AffectedInternshipsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsOutdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SyncCompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SyncStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentLabSyncLog");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.SyncLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AffectedEntitiesCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsOutdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SyncCompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SyncStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("SyncLog");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasSeniority")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Workplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExternalWorkplaceId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastSyncDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OfficeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SchemeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ExternalWorkplaceId")
                        .IsUnique();

                    b.ToTable("Workplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+DeactivationReasons", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("DeactivationReason", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Dismissed"
                        },
                        new
                        {
                            Id = "MaternityLeave"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+InternshipCloseReasons", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("InternshipCloseReason", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Manually"
                        },
                        new
                        {
                            Id = "AutomaticallyDueInactivity"
                        },
                        new
                        {
                            Id = "AutomaticallyDueEmployment"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanChangeTypes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("RelocationPlanChangeType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "InductionPassed"
                        },
                        new
                        {
                            Id = "Status"
                        },
                        new
                        {
                            Id = "Destination"
                        },
                        new
                        {
                            Id = "Approved"
                        },
                        new
                        {
                            Id = "Confirmed"
                        },
                        new
                        {
                            Id = "EmploymentConfirmedByEmployee"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanStates", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("RelocationPlanState", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Active"
                        },
                        new
                        {
                            Id = "Completed"
                        },
                        new
                        {
                            Id = "Cancelled"
                        },
                        new
                        {
                            Id = "Rejected"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanTrpStates", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("RelocationPlanTrpState", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "DocsPreparation"
                        },
                        new
                        {
                            Id = "DocsTranslationAndLegalization"
                        },
                        new
                        {
                            Id = "SubmissionToMigrationDirectorate"
                        },
                        new
                        {
                            Id = "ApplicationSubmission"
                        },
                        new
                        {
                            Id = "InProgress"
                        },
                        new
                        {
                            Id = "IdCardDocsInProgress"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationSteps", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("RelocationStep", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Induction"
                        },
                        new
                        {
                            Id = "RelocationConfirmation"
                        },
                        new
                        {
                            Id = "PendingApproval"
                        },
                        new
                        {
                            Id = "ProcessingQueue"
                        },
                        new
                        {
                            Id = "VisaDocsPreparation"
                        },
                        new
                        {
                            Id = "WaitingEmbassyAppointment"
                        },
                        new
                        {
                            Id = "EmbassyAppointment"
                        },
                        new
                        {
                            Id = "VisaInProgress"
                        },
                        new
                        {
                            Id = "VisaDone"
                        },
                        new
                        {
                            Id = "TrpDocsPreparation"
                        },
                        new
                        {
                            Id = "TrpDocsTranslationAndLegalization"
                        },
                        new
                        {
                            Id = "TrpDocsSubmissionToMigrationDirectorate"
                        },
                        new
                        {
                            Id = "TrpApplicationSubmission"
                        },
                        new
                        {
                            Id = "TrpInProgress"
                        },
                        new
                        {
                            Id = "TrpIdCardDocsInProgress"
                        },
                        new
                        {
                            Id = "EmploymentConfirmation"
                        },
                        new
                        {
                            Id = "EmploymentInProgress"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+SyncTypes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("SyncType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "DownloadExternalWspData"
                        },
                        new
                        {
                            Id = "LinkEmployeeWorkplaces"
                        },
                        new
                        {
                            Id = "DownloadExternalEmploymentRequestData"
                        },
                        new
                        {
                            Id = "LinkEmploymentRequests"
                        },
                        new
                        {
                            Id = "DownloadExternalDismissalRequestData"
                        },
                        new
                        {
                            Id = "LinkDismissalRequests"
                        },
                        new
                        {
                            Id = "DownloadExternalEmployeeUnitHistory"
                        },
                        new
                        {
                            Id = "LinkEmployeeUnitHistory"
                        });
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfo", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", "RelocationPlan")
                        .WithOne("Compensation")
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfo", "RelocationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfoDetails", "Details", b1 =>
                        {
                            b1.Property<int>("CompensationInfoId")
                                .HasColumnType("int");

                            b1.HasKey("CompensationInfoId");

                            b1.ToTable("CompensationInfo");

                            b1.WithOwner()
                                .HasForeignKey("CompensationInfoId");

                            b1.OwnsOne("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfoDetailsItem", "Child", b2 =>
                                {
                                    b2.Property<int>("CompensationInfoDetailsCompensationInfoId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Amount")
                                        .HasColumnType("real");

                                    b2.Property<bool>("Enabled")
                                        .HasColumnType("bit");

                                    b2.Property<int>("NumberOfPeople")
                                        .HasColumnType("int");

                                    b2.HasKey("CompensationInfoDetailsCompensationInfoId");

                                    b2.ToTable("CompensationInfo");

                                    b2.WithOwner()
                                        .HasForeignKey("CompensationInfoDetailsCompensationInfoId");
                                });

                            b1.OwnsOne("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfoDetailsItem", "Employee", b2 =>
                                {
                                    b2.Property<int>("CompensationInfoDetailsCompensationInfoId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Amount")
                                        .HasColumnType("real");

                                    b2.Property<bool>("Enabled")
                                        .HasColumnType("bit");

                                    b2.Property<int>("NumberOfPeople")
                                        .HasColumnType("int");

                                    b2.HasKey("CompensationInfoDetailsCompensationInfoId");

                                    b2.ToTable("CompensationInfo");

                                    b2.WithOwner()
                                        .HasForeignKey("CompensationInfoDetailsCompensationInfoId");
                                });

                            b1.OwnsOne("DreamTeam.Wod.EmployeeService.DomainModel.CompensationInfoDetailsItem", "Spouse", b2 =>
                                {
                                    b2.Property<int>("CompensationInfoDetailsCompensationInfoId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Amount")
                                        .HasColumnType("real");

                                    b2.Property<bool>("Enabled")
                                        .HasColumnType("bit");

                                    b2.Property<int>("NumberOfPeople")
                                        .HasColumnType("int");

                                    b2.HasKey("CompensationInfoDetailsCompensationInfoId");

                                    b2.ToTable("CompensationInfo");

                                    b2.WithOwner()
                                        .HasForeignKey("CompensationInfoDetailsCompensationInfoId");
                                });

                            b1.Navigation("Child")
                                .IsRequired();

                            b1.Navigation("Employee")
                                .IsRequired();

                            b1.Navigation("Spouse")
                                .IsRequired();
                        });

                    b.OwnsOne("DreamTeam.Wod.EmployeeService.DomainModel.PreviousCompensationInfo", "PreviousCompensation", b1 =>
                        {
                            b1.Property<int>("CompensationInfoId")
                                .HasColumnType("int");

                            b1.Property<float>("Amount")
                                .HasColumnType("real");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompensationInfoId");

                            b1.ToTable("CompensationInfo");

                            b1.WithOwner()
                                .HasForeignKey("CompensationInfoId");
                        });

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("PreviousCompensation")
                        .IsRequired();

                    b.Navigation("RelocationPlan");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.CountryRelocationStep", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationSteps", null)
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.DismissalRequest", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.ExternalDismissalRequest", "SourceDismissalRequest")
                        .WithMany()
                        .HasForeignKey("SourceDismissalRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DreamTeam.Repositories.EntityFramework.ModelBuilderExtensions+EnumValue<DreamTeam.Wod.EmployeeService.DomainModel.DismissalRequestType>", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SourceDismissalRequest");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Employee", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+DeactivationReasons", null)
                        .WithMany()
                        .HasForeignKey("DeactivationReason")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Repositories.EntityFramework.ModelBuilderExtensions+EnumValue<DreamTeam.Wod.EmployeeService.DomainModel.EmploymentType>", null)
                        .WithMany()
                        .HasForeignKey("EmploymentType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "ResponsibleHrManager")
                        .WithMany()
                        .HasForeignKey("ResponsibleHrManagerId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Seniority", "Seniority")
                        .WithMany()
                        .HasForeignKey("SeniorityId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", "TitleRole")
                        .WithMany()
                        .HasForeignKey("TitleRoleId");

                    b.Navigation("CurrentLocation");

                    b.Navigation("ResponsibleHrManager");

                    b.Navigation("Seniority");

                    b.Navigation("TitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocation", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeCurrentLocationChange", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "NewLocation")
                        .WithMany()
                        .HasForeignKey("NewLocationId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "PreviousLocation")
                        .WithMany()
                        .HasForeignKey("PreviousLocationId");

                    b.Navigation("Employee");

                    b.Navigation("NewLocation");

                    b.Navigation("PreviousLocation");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeOrganizationChange", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeRole", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeSnapshot", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Seniority", "Seniority")
                        .WithMany()
                        .HasForeignKey("SeniorityId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", "TitleRole")
                        .WithMany()
                        .HasForeignKey("TitleRoleId");

                    b.Navigation("Employee");

                    b.Navigation("Seniority");

                    b.Navigation("TitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeUnitHistory", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeWorkplace", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany("Workplaces")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Workplace", "Workplace")
                        .WithMany()
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmploymentPeriod", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany("EmploymentPeriods")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmploymentRequest", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmploymentRequest", "SourceEmploymentRequest")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SourceEmploymentRequest");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmployeeUnitHistory", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeUnitHistory", "EmployeeUnitHistory")
                        .WithOne("ExternalEmployeeUnitHistory")
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmployeeUnitHistory", "EmployeeUnitHistoryId");

                    b.Navigation("EmployeeUnitHistory");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmployeeWorkplace", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeWorkplace", "EmployeeWorkplace")
                        .WithOne("ExternalEmployeeWorkplace")
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.ExternalEmployeeWorkplace", "EmployeeWorkplaceId");

                    b.Navigation("EmployeeWorkplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Internship", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+InternshipCloseReasons", null)
                        .WithMany()
                        .HasForeignKey("CloseReason")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApprover", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApproverOrder", "ApproverOrder")
                        .WithOne()
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApprover", "ApproverOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproverOrder");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationApproverAssignment", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", "RelocationPlan")
                        .WithMany()
                        .HasForeignKey("RelocationPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("RelocationPlan");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationSteps", null)
                        .WithMany()
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "GmManager")
                        .WithMany()
                        .HasForeignKey("GmManagerId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "HrManager")
                        .WithMany()
                        .HasForeignKey("HrManagerId");

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanStates", null)
                        .WithMany()
                        .HasForeignKey("State")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Employee");

                    b.Navigation("GmManager");

                    b.Navigation("HrManager");

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanChange", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "NewDestination")
                        .WithMany()
                        .HasForeignKey("NewDestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStatus", "NewStatus")
                        .WithMany()
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.CurrentLocation", "PreviousDestination")
                        .WithMany()
                        .HasForeignKey("PreviousDestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStatus", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", "RelocationPlan")
                        .WithMany()
                        .HasForeignKey("RelocationPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationPlanChangeTypes", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("NewDestination");

                    b.Navigation("NewStatus");

                    b.Navigation("PreviousDestination");

                    b.Navigation("PreviousStatus");

                    b.Navigation("RelocationPlan");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStatus", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationCaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CaseStatus");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlanStep", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", "RelocationPlan")
                        .WithMany("Steps")
                        .HasForeignKey("RelocationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+RelocationSteps", null)
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelocationPlan");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Role", "Role")
                        .WithOne()
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationEmployee", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "RoleConfiguration")
                        .WithMany("Employees")
                        .HasForeignKey("RoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("RoleConfiguration");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationTitleRole", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "RoleConfiguration")
                        .WithMany("TitleRoles")
                        .HasForeignKey("RoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.TitleRole", "TitleRole")
                        .WithMany()
                        .HasForeignKey("TitleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleConfiguration");

                    b.Navigation("TitleRole");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfigurationUnit", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", "RoleConfiguration")
                        .WithMany("Units")
                        .HasForeignKey("RoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleConfiguration");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.SyncLog", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.Repositories.EmployeeServiceDbContext+SyncTypes", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Workplace", b =>
                {
                    b.HasOne("DreamTeam.Wod.EmployeeService.DomainModel.ExternalWorkplace", "ExternalWorkplace")
                        .WithOne("Workplace")
                        .HasForeignKey("DreamTeam.Wod.EmployeeService.DomainModel.Workplace", "ExternalWorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalWorkplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Employee", b =>
                {
                    b.Navigation("EmploymentPeriods");

                    b.Navigation("Roles");

                    b.Navigation("Workplaces");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeUnitHistory", b =>
                {
                    b.Navigation("ExternalEmployeeUnitHistory");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.EmployeeWorkplace", b =>
                {
                    b.Navigation("ExternalEmployeeWorkplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.ExternalWorkplace", b =>
                {
                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RelocationPlan", b =>
                {
                    b.Navigation("Compensation");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DreamTeam.Wod.EmployeeService.DomainModel.RoleConfiguration", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("TitleRoles");

                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
